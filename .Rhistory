"WHEN_DISC","SYS_CODE",
"RFG","SCD1","SCD2"),
numeric=c("EI_BEG_AGE"))
dropCols = c("EVENT_DATE_TIME","EI_SN")
source(paste0(script_path,"prep_and_tokenize.R"))
ASAP_data <- fread(paste0(data_path,fn),colClasses = colClasses,drop=dropCols)
print("Data file read.")
end
sjdfafj;f
aff
sjdfafj;f
;
end
efjoiaejfo;ewf
how to end quot
library(h2o)
h2o.init(nthreads = -1)
make_w2v_model()
source("C:\\Users\\RDITLQTD\\Desktop\\QD_EDIT\\make_w2v_model.R")
source("C:\\Users\\RDITLQTD\\Desktop\\QD_EDIT\\make_w2v_model.R")
make_w2v_model()
h2o.shutdown(prompt = FALSE)
library(data.table)
library(h2o)
library(tm)
source("C:\\Users\\RDITLQTD\\Desktop\\QD_EDIT\\prep_and_tokenize.R")
source(paste0(script_path,"prep_and_tokenize.R"))
q()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z, 555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files
)
old.dir <- getpw()
old.dir <- getwd()
dir.create(testdir)
getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest2")
file.rename(mytest, mytest2)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir3"), "testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
dir()
setwd(old.dir)
install.package(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
clear
y <- 10
f <- function(x) {}
f <- function(x) { y <- 2; y^2 + g(x)}
g <- function(x) { x*y }
f(3)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor( 5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
sumbit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){tail(x)}, c(8, 4, 0))
evaluate(function(x){(x[3])}, c(8, 4, 0))
evaluate(function(x){(x[length(x)])}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Hello")
submit()
submit()
mad_libs(McDonalds, small, shoes)
mad_libs("McDonalds", "small", "shoes")
submit()
submit()
submimt()
submit()
submit()
submit()
submit()
submit()
I %p% love %p% R
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {}
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) {}
if(x > 5) { x <- 0}
x < 1:10
if (x > 5) { x <- 0}
x <- 1:10
if(x > 5) { x <- 0 }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, n = 6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flags_shapes <- flags[,19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flag, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flag$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
iris
sepalLength <- iris[iris[,3 && 5],]
sepalLength <- iris[iris[3 && 5],]
sepalLength <- iris[[3 && 5],]
sepalLength <- iris[[3 && 5]]
sepalLength
sepalLength <- iris[,3,5]
sepalLength
sepalLength <- iris[(iris[,"Species" == "virginica"])]
sepalLength <- iris[(iris["Species" == "virginica",])]
sepalLength <- iris[(iris["Species" == "virginica",]),]
sepalLength <- iris["Species" == "virginica",]
sepalLength
irs
iris
lapply(iris, mean)
sepalLengthMean  <- iris[,5 == "virginica"]
sepalLengthMean
iris
sepalLengthMean  <- iris[,(5 == "virginica")]
sepalLengthMean
sepalLengthMean  <- iris[iris[,(5 == "virginica"),]
]
iris <- data.frame(iris)
iris
sepalLengthMean  <- iris[iris[,(5 == "virginica"),]]
?cbind
class(iris)
iris
sepalLength <- iris[iris[, (5 == "virginica")]]
sepalLength <- iris[iris[, (5 == "virginica")],]
sepalLength <- iris[iris[(5 == "virginica"],]
sepalLength <- iris[iris[5 == "virginica"],]
sepalLength <- iris[iris(5 == "virginica"),]
sepalLength <- iris(iris[,5 == "virginica"])
sepalLength <- iris(iris[5 == "virginica",])
sepalLength <- iris(iris[(5 == "virginica"),])
sepalLength <- iris[iris[(5 == "virginica"),]]
?colnames
sepalLength <- lapply(iris, mean, iris[,colname="species"] == "virginica")
sepalLength <- lapply(iris, mean)
sepalLength <- lapply(iris, mean)
sepalLength <- lapply(iris, mean, iris[,5] == "virginica")
class(iris0)
class(iris)
as.list(iris)
lapply(iris["sepal.Length"], mean)
class(iris
)
library(datasets)
data(iris)
?iris
newIris <- iris
class(iris)
data <- iris[,(3, 5)]
data <- iris[,(3 & 5)]
data
data <- iris[,1]
newData <- iris[,5]
data <- cbind(data, newData)
data
data <- iris[,1]
newData <- iris[,5]
data
newData
data <- c(data, newData)
data
data <- iris[,1]
newData <- iris[,5]
data
newDate
newData
data < list(data, newData)
data <- list(data, newData)
data
data <- data[1]
data
data <- data.frame(data)
data
data <- iris[,1]
newData <- iris[,5]
data <- c(iris[,1], iris[,5])
data
data <- list(iris[,1], iris[,5])
data
data
lapply(data, function(x) {})
?pop
class(iris)
iris
class(iris)
iris
dim(iris)
colnames(iris)
data <- iris[, "Species" ==  "virginica"]
data
data <- iris[,(5) == "virginica"]
data
data <- iris[,(iris[,5] == "virginica")]
data <- iris[,(iris[,5]) == "virginica"]
data <- iris[(iris[,5])== "virginica",]
data
data <- iris[(iris[,5])== "virginica",]
lapply(data[,3], mean)
data <- iris[(iris[,5])== "virginica",]
sepalLength <- data[,1]
sepalLength
lapply(sepalLength, mean)
data <- iris[(iris[,5])== "virginica",]
sepalLength <- data[,1]
meanSepalLength <- sepalLength
meanSepalLength <- mean(sepalLength)
meanSepalLength
apply(iris, 2, mean)
rowMeans(iris,[, 1:4])
rowMeans(iris[, 1:4])
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
apply(iris, 1, mean)
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
split(mtcars, mycars$cyl)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sub(209.21429 - 82.63636)
sub(209.21429, 82.63636)
209.21429 - 82.63636
debug(ls)
ls
debug(ls)
ls()
quit
with(mtcars, tapply(mpg, cyl, mean))
Q
Q
?cache
??cache
getwd
getwd()
setwd("C:/Users/RDITLQTD/Desktop/Data_Specialization_Course/WK3_PROG_ASGNMT/")
setwd("C:/Users/RDITLQTD/Desktop/Data_Specialization_Course/CRSE2/WK3_PROG_ASGNMT/")
setwd("C:/Users/RDITLQTD/Desktop/Data_Science_Specialization/CRSE2/WK3_PROG_ASGNMT/")
setwd("C:/Users/RDITLQTD/Desktop/Data_Science_Specialization/CRSE2/WK3_PROG_ASGNMT/ProgrammingAssignment2/")
ls()
ls
dir()
source("cachematrix.R")
source("cachevector.R")
makeVector()
makeVector()
source("cachematrix.R")
source("cachevector.R")
newV <- c(1,2,3,4,5)
makeVector(newV)
cachemean
cachemean()
cachemean(makeVector())
makeVector
numeric()
numeric()
matrix()
source("cachematrix.R")
source("cachevector.R")
makeCacheMatrix()
makeCacheMatrix
rnorm(matrix())
matrix(2,2)
matrix(1:10)
matrix(c(1,2,3,4), ncol = 2, nrow = 2)
MATRIX <- matrix(c(1,2,3,4), ncol = 2, nrow = 2)
MATRIX <- matrix(c(1,2,3,4), ncol = 2, nrow = 2)
MATRIX
makeCacheMatrix(MATRIX)
source("cachematrix.R")
cacheSolve(MATRIX)
x = numeric()
x
x = numeric(1, 2, 3, 4, 5)
x = numeric(c(1,2,3,4,5))
?numeric()
source("cachevector.R")
makeVector(1)
makeVector
makeVector(4)
makeVector(4,2,3,4,5)
makeVector(c(4,2,3,4,5)
)
source("cachevector.R")
my_vector <- makeVector(c(1,2,3,4))
my_vector$get()
my_matrix$getmean()
my_vector$getmean()
source("cachevector.R")
vector <- makeVector(c(1,2,3,4,5))
vector$get()
vector$getmean()
cachemean(vector)
cachemean(vector)
vector$getmean()
vector <- makeVector(c(1,2,3,4))
vector$get()
vector$getmean()
cachemean(vector)
cachemean(vector)
vector$getmean()
vector <- makeVector(c(1,2,3,4,5))
vector$get()
vector$getmean()
cachemean(vector)
cachemean(vector)
source("cachematrix.R")
matrix <- makeCacheMatrix(c(1,2,3,4), 2, 2)
matrix <- makeCacheMatrix(c(1,2,3,4), 2, 2))
matrix <- makeCacheMatrix(c(1,2,3,4), 2, 2))
matrix <- makeCacheMatrix(matrix(c(1,2,3,4), 2, 2))
matrix
source("cachematrix.R")
vector <- c(2,3,4,5)
matrix <- makeCacheMatrix(matrix(vector, 2, 2))
matrix$get()
source("cachematrix.R")
vector <- c(2,3,4,5)
matrix <- makeCacheMatrix(matrix(vector, 2, 2))
matrix$getMatrix()
matrix$getInverse()
cacheSolve(matrix)
cacheSolve(matrix)
vector <- c(1,2,3,4)
matrix <- makeCacheMatrix(matrix(vector, 2, 2))
matrix$getMatrix()
matrix$getInverse()
cachSolve(matrix)
cacheSolve(matrix)
cacheSolve(matrix)
